package union_find;

import java.util.*;

public class MinimizeMalwareSpread {
    static class UnionFind {
        int[] parents;
        int[] size;

        // Constructor
        public UnionFind(int n) {
            parents = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parents[i] = i;
                size[i] = 1;
            }
        }

        // Function to find which subset a particular element belongs.
        public int findParent(int x) {
            if (parents[x] == x) {
                return x;
            }
            return parents[x] = findParent(parents[x]);
        }

        // Function to join two subsets into a single subset.
        public void Union(int x, int y) {
            int xParent = findParent(x);
            int yParent = findParent(y);
            if (xParent != yParent) {
                parents[xParent] = yParent;
                size[yParent] += size[xParent];
            }
        }
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        // Stores the length of the graph
        int length = graph.length;
        // Calls UnionFind constructor
        UnionFind unionFind = new UnionFind(length);
        // Find all the connected components of the graph
        for (int x = 0; x < length; x++) {
            for (int y = 0; y < length; y++) {
                if (graph[x][y] == 1) {
                    unionFind.Union(x, y);
                }
            }
        }

        Map<Integer, Integer> infected = new HashMap<>();
        Arrays.sort(initial);
        // Count the number of initial infected nodes each connected component has
        for (int x = 0; x < initial.length; x++) {
            int findIx = unionFind.findParent(initial[x]);
            infected.put(findIx, infected.getOrDefault(findIx, 0) + 1);
        }

        int candidateNode = initial[0];
        int maximumSize = 0;
        // Count all the infected nodes each connected component has
        for (int i = 0; i < initial.length; i++) {
            int infectionCount = infected.get(unionFind.findParent(initial[i]));
            int componentSize = unionFind.size[unionFind.findParent(initial[i])];
            if (infectionCount != 1) {
                continue;
            }
            // Return the candidate node from largest length connected component
            if (componentSize > maximumSize) {
                maximumSize = componentSize;
                candidateNode = initial[i];
            } else if (componentSize == maximumSize && initial[i] < candidateNode) {
                candidateNode = initial[i];
            }
        }
        return candidateNode;
    }

    // Driver code
    public static void main(String[] args) {

        int[][][] graph = {
                {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}},
                {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}},
                {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}},
                {{1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}},
                {{1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}, {1, 1, 1, 0, 1}}};

        int[][] initial = {{1, 2}, {0, 1}, {0, 2}, {2, 3}, {3, 4}};
        for (int i = 0; i < graph.length; i++) {
            System.out.print(i + 1);
            System.out.println(".\tgraph = " + Arrays.deepToString(graph[i]) + " , initial = " + Arrays.toString(initial[i]));
            System.out.println("\tThe node which minimizes malware spread is: " + minMalwareSpread(graph[i], initial[i]));
            System.out.println(new String(new char[100]).replace('\0', '-'));
        }
    }

}
